import tkinter as tk
import cairo

# Define constants
NODE_WIDTH = 60
NODE_HEIGHT = 40
CHILD_SPACING = 20
LEVEL_SPACING = 50
LABEL_FONT = ("Arial", 10)

class Person:
    def __init__(self, name, parent=None):
        self.name = name
        self.parent = parent
        self.children = []

        if parent:
            parent.add_child(self)

    def add_child(self, child):
        self.children.append(child)

class FamilyTree:
    def __init__(self):
        self.root = None

    def add_root(self, person):
        if self.root:
            raise Exception("Root already exists")

        self.root = person

    def create_from_dict(self, dictionary):
        for key, value in dictionary.items():
            person = self.find_or_create_person(key)

            for child_name in value:
                child = self.find_or_create_person(child_name)
                person.add_child(child)

    def find_or_create_person(self, name):
        person = self.find_person(name)

        if person is None:
            person = Person(name)
        
        if self.root is None:
            self.add_root(person)

        return person

    def find_person(self, name):
        return self._find_person_recursive(name, self.root)

    def _find_person_recursive(self, name, node):
        if node is None:
            return None

        if node.name == name:
            return node

        for child in node.children:
            result = self._find_person_recursive(name, child)
            if result is not None:
                return result

        return None

class TreeDrawer:
    def __init__(self, canvas, family_tree):
        self.canvas = canvas
        self.family_tree = family_tree
        self.node_coords = {}

    def draw_tree(self):
        self.canvas.delete(tk.ALL)
        self.node_coords = {}
        self._draw_node(self.family_tree.root, self.canvas.winfo_width() // 2, 50)

    def _draw_node(self, node, x, y):
        # Draw the node
        x0 = x - NODE_WIDTH // 2
        y0 = y - NODE_HEIGHT // 2
        x1 = x + NODE_WIDTH // 2
        y1 = y + NODE_HEIGHT // 2
        self.canvas.create_rectangle(x0, y0, x1, y1, fill='white', outline='black')
        label = node.name
        self.canvas.create_text(x, y, text=label, font=LABEL_FONT)

        # Save the coordinates of the node
        self.node_coords[node] = (x, y)

        # Draw the children
        num_children = len(node.children)
        child_width = NODE_WIDTH * num_children + CHILD_SPACING * (num_children - 1)
        for i, child in enumerate(node.children):
            child_x = x + (i - num_children // 2) * (NODE_WIDTH + CHILD_SPACING)
            child_y = y + NODE_HEIGHT + LEVEL_SPACING
            self._draw_node(child, child_x, child_y)

    def export_tree(self):
        """Exports the family tree as a PNG image."""
        # Create a new surface and draw the tree on it
        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, self.canvas.winfo_width(), self.canvas.winfo_height())
        context = cairo.Context(surface)
        self._draw_node(self.family_tree.root, self.canvas.winfo_width() // 2, NODE_HEIGHT, context)

        # Save the surface to a PNG file
        surface.write_to_png("family_tree.png")
